{"version":3,"sources":["utils/Words.js","components/Crossword.js","components/Main.js","App.js","index.js"],"names":["nouns","randomizeWords","words","i","push","Math","floor","random","length","Crossword_Gen","state","Component","Main","props","alphabet","key","encryptedWords","generateKey","bind","generateEncryptedWords","encrypt","this","sort","console","log","setState","tempWords","wordList","EncryptWord","word","encryptedWord","ii","letter","findIndex","number","className","onClick","type","data-toggle","data-target","aria-expanded","aria-controls","Crossword","data","class","map","item","id","App","ReactDOM","render","document","getElementById"],"mappings":"wSAAMA,EAAQ,CACV,OACA,OACA,SACA,MACA,OACA,MACA,MACA,QACA,QACA,OACA,QACA,QACA,SACA,QACA,SACA,UACA,QACA,aACA,UACA,SACA,QACA,UACA,UACA,WACA,OACA,QACA,WACA,UACA,SACA,SACA,SACA,cACA,YACA,UACA,gBACA,SACA,SAWWC,MARf,WAEI,IADA,IAAIC,EAAQ,GACJC,EAAI,EAAGA,EAAI,GAAIA,IACnBD,EAAME,KAAKJ,EAAMK,KAAKC,MAAMD,KAAKE,SAASP,EAAMQ,UAEpD,OAAON,GC9BIO,E,2MAZXC,MAAQ,G,wEAKJ,OACI,kC,GAPgBC,aC+EbC,E,YA3EX,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KACDH,MAAQ,CACTI,SAAW,CACP,IAAI,IAAI,IAAI,IAAI,IAAI,IACpB,IAAI,IAAI,IAAI,IAAI,IAAI,IACpB,IAAI,IAAI,IAAI,IAAI,IAAI,IACpB,IAAI,IAAI,IAAI,IAAI,IAAI,IACpB,IAAI,KAERC,IAAK,GACLC,eAAgB,IAEpB,EAAKC,YAAc,EAAKA,YAAYC,KAAjB,gBACnB,EAAKC,uBAAyB,EAAKA,uBAAuBD,KAA5B,gBAdf,E,2EAmBf,IACIE,EACJA,EAFeC,KAAKX,MAAMI,SAEPQ,MAAK,kBAAMjB,KAAKE,SAAW,MAC9C,IAAI,IAAIJ,EAAI,EAAGA,EAAIiB,EAAQZ,OAAQL,IAC/BoB,QAAQC,IAAIJ,EAAQjB,GAAKA,GAE7BkB,KAAKI,SAAS,CAAEV,IAAKK,M,mLAKfC,KAAKJ,c,OACPS,EAAY,GACZC,EAAW1B,IACfsB,QAAQC,IAAIG,GACJxB,EAAI,E,YAAGA,EAAIwB,EAASnB,Q,6BACxBkB,E,UAAqBL,KAAKO,YAAYD,EAASxB,I,yBAArCC,K,wBADsBD,I,uBAGpCkB,KAAKI,SAAS,CAAET,eAAgBU,I,yIAIxBG,GAGR,IAHe,IACTd,EAAQM,KAAKX,MAAbK,IACFe,EAAgB,GACZC,EAAK,EAAGA,EAAKF,EAAKrB,OAAQuB,IAAM,CACpC,IAAIC,EAASH,EAAKE,GAElBD,GADsBf,EAAIkB,WAAU,SAAAC,GAAM,OAAIA,IAAWF,KAAU,EAChC,IAEvC,OAAOF,I,+BAIP,OACI,yBAAKK,UAAU,QACX,4BAAQA,UAAU,+BAA+BC,QAASf,KAAKF,wBAA/D,kBACA,4BAAQgB,UAAU,8BAA8BE,KAAK,SAASC,cAAY,WAAWC,cAAY,mBAAmBC,gBAAc,QAAQC,gBAAc,mBAAxJ,YACA,yBAAKN,UAAU,kBACX,kBAACO,EAAD,CAAeC,KAAMtB,KAAKX,MAAMM,iBAEhC,yBAAK4B,MAAM,OACNvB,KAAKX,MAAMM,eAAe6B,KAAI,SAACC,EAAM/B,GAAP,OAAe,yBAAKA,IAAKA,EAAM,EAAGoB,UAAU,YAAYW,OAG3F,yBAAKF,MAAM,gBAAgBG,GAAG,mBAC1B,yBAAKH,MAAM,OACNvB,KAAKX,MAAMK,IAAI8B,KAAI,SAACC,EAAM/B,GAAP,OAAe,yBAAKA,IAAKA,EAAM,EAAGoB,UAAU,YAAYW,EAAzC,MAAkD/B,EAAM,c,GAnEpGJ,aCoBJqC,MApBf,WACE,OACE,yBAAKb,UAAU,OACX,yBAAKA,UAAU,mBACX,wBAAIA,UAAU,mCAAd,0BACA,uBAAGA,UAAU,gBAAb,kMAEA,uBAAGA,UAAU,yBAAb,eACA,0FACA,8FACA,kBAAC,EAAD,MACA,uBAAGA,UAAU,yBAAb,eACA,uBAAGA,UAAU,gBAAb,2VCZZc,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.b670f1dd.chunk.js","sourcesContent":["const nouns = [\r\n    'time',\r\n    'year',\r\n    'people',\r\n    'way',\r\n    'down',\r\n    'day',\r\n    'man',\r\n    'thing',\r\n    'woman',\r\n    'life',\r\n    'child',\r\n    'world',\r\n    'school',\r\n    'state',\r\n    'family',\r\n    'student',\r\n    'group',\r\n    'government',\r\n    'problem',\r\n    'number',\r\n    'night',\r\n    'bedroom',\r\n    'program',\r\n    'question',\r\n    'home',\r\n    'point',\r\n    'business',\r\n    'netflix',\r\n    'amazon',\r\n    'google',\r\n    'member',\r\n    'information',\r\n    'education',\r\n    'morning',\r\n    'disappearance',\r\n    'others',\r\n    'level'\r\n]\r\n\r\nfunction randomizeWords() {\r\n    let words = []\r\n    for(var i = 0; i < 20; i++ ) {\r\n        words.push(nouns[Math.floor(Math.random()*nouns.length)])\r\n    }\r\n    return words\r\n};\r\n\r\nexport default randomizeWords","import React, { Component } from 'react';\r\n\r\nclass Crossword_Gen extends Component {\r\n    state = { \r\n    }\r\n\r\n\r\n    render() { \r\n        return ( \r\n            <div>\r\n            </div>\r\n         );\r\n    }\r\n}\r\n \r\nexport default Crossword_Gen;","import React, { Component } from 'react';\r\n\r\nimport randomizeWords from '../utils/Words'\r\nimport Crossword_Gen from \"./Crossword\"\r\n\r\nclass Main extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            alphabet:  [\r\n                'a','b','c','d','e','f',\r\n                'g','h','i','j','k','l',\r\n                'm','n','o','p','q','r',\r\n                's','t','u','v','w','x',\r\n                'y','z'\r\n            ],\r\n            key: [],\r\n            encryptedWords: []\r\n        }\r\n        this.generateKey = this.generateKey.bind(this)\r\n        this.generateEncryptedWords = this.generateEncryptedWords.bind(this)\r\n    }\r\n\r\n    //Shuffles elements in Alphabet array to give letters new indexes\r\n    generateKey() {\r\n        var alphabet = this.state.alphabet\r\n        var encrypt = []\r\n        encrypt = alphabet.sort(() => Math.random() - 0.5);\r\n        for(var i = 0; i < encrypt.length; i++ ) {\r\n            console.log(encrypt[i] + i)\r\n        }\r\n        this.setState({ key: encrypt})\r\n    }\r\n\r\n    //Creates encrypted words \r\n    async generateEncryptedWords() {\r\n        await this.generateKey()\r\n        var tempWords = []\r\n        var wordList = randomizeWords()\r\n        console.log(wordList)\r\n        for(var i = 0; i < wordList.length; i++) {\r\n            tempWords.push(await this.EncryptWord(wordList[i]))\r\n        }\r\n        this.setState({ encryptedWords: tempWords})\r\n    }\r\n\r\n    //Returns encrypted word\r\n    EncryptWord(word) {\r\n        let { key } = this.state\r\n        let encryptedWord = \"\"\r\n        for(var ii = 0; ii < word.length; ii++) {\r\n            var letter = word[ii]\r\n            var encryptedLetter = key.findIndex(number => number === letter) + 1\r\n            encryptedWord += encryptedLetter + \",\"\r\n        }\r\n        return encryptedWord\r\n    }\r\n\r\n    render() { \r\n        return (\r\n            <div className=\"mt-3\">\r\n                <button className=\"btn btn-outline-success mx-2\" onClick={this.generateEncryptedWords}>Generate Words</button>\r\n                <button className=\"btn btn-outline-danger mx-2\" type=\"button\" data-toggle=\"collapse\" data-target=\"#collapseExample\" aria-expanded=\"false\" aria-controls=\"collapseExample\">Solution</button>\r\n                <div className=\"container mt-3\">\r\n                    <Crossword_Gen data={this.state.encryptedWords}></Crossword_Gen>\r\n\r\n                    <div class=\"row\">\r\n                        {this.state.encryptedWords.map((item, key) => <div key={key + 1} className=\"col-md-4\">{item}</div>)}\r\n                    </div>\r\n\r\n                    <div class=\"collapse mt-4\" id=\"collapseExample\">\r\n                        <div class=\"row\">\r\n                            {this.state.key.map((item, key) => <div key={key + 1} className=\"col-md-2\">{item} = {key + 1}</div>)}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        ) \r\n    }\r\n}\r\n \r\nexport default Main;","import React from 'react';\nimport './App.css';\n\nimport Main from \"./components/Main.js\"\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <div className=\"container-fluid\">\n            <h1 className=\"display-2 font-weight-bold py-3\">Encrypted Puzzle Maker</h1>\n            <p className=\"w-50 mx-auto\">Inspired by a book on Bletchley park, I created an encrypted puzzle generator. It selects 20 words from a list of common \n            nouns in the english language and replaces each letter with a number.</p>\n            <p className=\"font-weight-bold my-3\">How to use.</p>\n            <p>Press the \"Generate\" button to generate 20 encrypted words.</p>\n            <p>Once you've finished, or given up, press the \"Solution\" button</p>\n            <Main/>   \n            <p className=\"font-weight-bold my-3\">Nerd stuff.</p>\n            <p className=\"w-50 mx-auto\">To generate a random set of numbers each time, an array containing the alphabet is shuffled giving each letter \n            a new index (position in the array). This new index is then used as the letters encrypted number. Once the shuffling is done, the app iterates through\n            20 selected words, replacing each letter with its corresponding index number. </p>\n        </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}